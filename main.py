import os
import gspread
import pandas as pd
from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse, JSONResponse
from pydantic import BaseModel

SHEET_NAME = "translation_sheet.xlsx"
CREDS_FILE = "credentials.json"

app = FastAPI()
worksheet = None

@app.on_event("startup")
def startup_event():
    global worksheet
    try:
        gc = gspread.service_account(filename=CREDS_FILE)
        spreadsheet = gc.open(SHEET_NAME)
        worksheet = spreadsheet.sheet1
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ: {e}")

class SaveRequest(BaseModel):
    filename: str
    translation: str
    interpreter_name: str

@app.get("/health")
def health_check():
    return JSONResponse(content={"status": "ok"})

@app.get("/get-task")
def get_task_for_interpreter(interpreter_name: str):
    if worksheet is None:
        raise HTTPException(status_code=503, detail="Service Unavailable: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet")

    try:
        df = pd.DataFrame(worksheet.get_all_records())

        required_cols = ['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß(‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)', '‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•', 'file_id', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']
        for col in required_cols:
            if col not in df.columns:
                raise HTTPException(status_code=500, detail=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col}' ‡πÉ‡∏ô Google Sheet")

        untranslated_rows = df[(df['‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•'] == '') & (df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] != '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•')]

        if untranslated_rows.empty:
            return {"message": "üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß"}

        task_row = untranslated_rows.iloc[0]
        row_index_to_update = task_row.name + 2

        worksheet.update_cell(row_index_to_update, 5, f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡πÇ‡∏î‡∏¢ {interpreter_name}")

        return {
            "filename": task_row['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå'],
            "duration": task_row['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß(‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)'],
            "file_id": task_row['file_id'], # <<< ‡∏™‡πà‡∏á File ID ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            "total_files": len(df),
            "current_index": int(task_row.name)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@app.post("/save-task")
def save_translation(request: SaveRequest):
    if worksheet is None:
        raise HTTPException(status_code=503, detail="Service Unavailable: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet")

    try:
        cell = worksheet.find(request.filename, in_column=1)
        worksheet.update_cell(cell.row, 3, request.translation)
        worksheet.update_cell(cell.row, 5, f"‡πÅ‡∏õ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢ {request.interpreter_name}")
        return {"status": "success"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

@app.get("/")
def read_root():
    return FileResponse('translator_tool.html')