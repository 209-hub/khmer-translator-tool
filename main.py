import os
import gspread
import pandas as pd
from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
SHEET_NAME = "translation_sheet.xlsx" # ‡∏ä‡∏∑‡πà‡∏≠ Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
CREDS_FILE = "credentials.json"       # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Key ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤

# --- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets ---
try:
    gc = gspread.service_account(filename=CREDS_FILE)
    spreadsheet = gc.open(SHEET_NAME)
    worksheet = spreadsheet.sheet1
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
except Exception as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ: {e}")
    worksheet = None

# --- FastAPI App ---
app = FastAPI()

# --- Models ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
class TaskRequest(BaseModel):
    interpreter_name: str

class SaveRequest(BaseModel):
    filename: str
    translation: str
    interpreter_name: str

# --- API Endpoints ---
@app.get("/get-task")
def get_task_for_interpreter(interpreter_name: str):
    if not worksheet:
        raise HTTPException(status_code=500, detail="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheet")
    
    df = pd.DataFrame(worksheet.get_all_records())
    
    # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏• ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà
    untranslated_rows = df[(df['‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•'] == '') & (df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] != '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•')]
    
    if untranslated_rows.empty:
        return {"message": "üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß"}

    task_row = untranslated_rows.iloc[0]
    row_index_to_update = task_row.name + 2 # +2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ index ‡∏Ç‡∏≠‡∏á pandas ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0 ‡πÅ‡∏•‡∏∞ header ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Sheet ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà
    worksheet.update_cell(row_index_to_update, 4, f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡πÇ‡∏î‡∏¢ {interpreter_name}")
    
    return {
        "filename": task_row['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå'],
        "duration": task_row['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß(‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)'],
        "total_files": len(df),
        "current_index": int(task_row.name)
    }

@app.post("/save-task")
def save_translation(request: SaveRequest):
    if not worksheet:
        raise HTTPException(status_code=500, detail="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheet")

    try:
        cell = worksheet.find(request.filename, in_column=1) # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 1
        worksheet.update_cell(cell.row, 3, request.translation) # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3
        worksheet.update_cell(cell.row, 4, "‡πÅ‡∏õ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß") # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 4
        return {"status": "success", "message": f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå {request.filename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"}
    except gspread.exceptions.CellNotFound:
        raise HTTPException(status_code=404, detail=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {request.filename} ‡πÉ‡∏ô Sheet")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Serve Frontend ---
app.mount("/audio_clips", StaticFiles(directory="audio_clips"), name="audio_clips")

@app.get("/")
def read_root():
    return FileResponse('translator_tool.html')