import os
import gspread
import pandas as pd
from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse, JSONResponse
from pydantic import BaseModel

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
SHEET_NAME = "translation_sheet.xlsx"
CREDS_FILE = "credentials.json"

app = FastAPI()
worksheet = None

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---
@app.on_event("startup")
def startup_event():
    global worksheet
    try:
        gc = gspread.service_account(filename=CREDS_FILE)
        spreadsheet = gc.open(SHEET_NAME)
        worksheet = spreadsheet.sheet1
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ: {e}")
        # ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á Error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API

# --- Models ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
class SaveRequest(BaseModel):
    filename: str
    translation: str
    interpreter_name: str

# --- API Endpoints ---

# <<< ‡πÄ‡∏û‡∏¥‡πà‡∏° Endpoint ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ >>>
@app.get("/health")
def health_check():
    # ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ Render ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    return JSONResponse(content={"status": "ok"})

@app.get("/get-task")
def get_task_for_interpreter(interpreter_name: str):
    if worksheet is None:
        raise HTTPException(status_code=503, detail="Service Unavailable: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheet ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log")

    try:
        df = pd.DataFrame(worksheet.get_all_records())

        if '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' not in df.columns:
            df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = ''
            worksheet.update_cell(1, 4, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞')

        untranslated_rows = df[(df['‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•'] == '') & (df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] != '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•')]

        if untranslated_rows.empty:
            return {"message": "üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß"}

        task_row = untranslated_rows.iloc[0]
        row_index_to_update = task_row.name + 2

        worksheet.update_cell(row_index_to_update, 4, f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡πÇ‡∏î‡∏¢ {interpreter_name}")

        return {
            "filename": task_row['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå'],
            "duration": task_row['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß(‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)'],
            "total_files": len(df),
            "current_index": int(task_row.name)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet: {e}")


@app.post("/save-task")
def save_translation(request: SaveRequest):
    if worksheet is None:
        raise HTTPException(status_code=503, detail="Service Unavailable: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheet ‡πÑ‡∏î‡πâ")

    try:
        cell = worksheet.find(request.filename, in_column=1)
        worksheet.update_cell(cell.row, 3, request.translation)
        worksheet.update_cell(cell.row, 4, "‡πÅ‡∏õ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        return {"status": "success", "message": f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå {request.filename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"}
    except gspread.exceptions.CellNotFound:
        raise HTTPException(status_code=404, detail=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {request.filename} ‡πÉ‡∏ô Sheet")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# --- Serve Frontend ---
@app.get("/")
def read_root():
    return FileResponse('translator_tool.html')